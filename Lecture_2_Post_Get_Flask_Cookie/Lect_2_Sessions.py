# СЕССИИ - SESSION

"""Сессии в Flask являются способом сохранения данных между запросами. Это может
быть полезно, например, для хранения информации о пользователе после
авторизации или для сохранения состояния формы при перезагрузке страницы.
Для работы с сессиями в Flask используется объект session. Он представляет собой
словарь, который можно использовать для записи и чтения данных. По сути сессия
— продвинутая версия cookies файлов."""

"""Пример использования сессии для хранения имени пользователя. Начнём с шаблона - username_form.html 

Простая форма запрашивает username и отправляет его на сервер. А теперь код Flask:
"""

from flask import (
    Flask,
    request,
    make_response,
    render_template,
    session,
    redirect,
    url_for,
)

app = Flask(__name__)
app.secret_key = "5f214cacbd30c2ae4784b520f17912ae0d5d8c16ae98128e3f549546221265e4"


@app.route("/")
def index():
    if "username" in session:
        return f'Привет, {session["username"]}'
    else:
        return redirect(url_for("login"))


@app.route("/login/", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        session["username"] = request.form.get("username") or "NoName"
        return redirect(url_for("index"))
    return render_template("username_form.html")


@app.route("/logout/")
def logout():
    session.pop("username", None)
    return redirect(url_for("index"))


"""Чтобы удалить данные из сессии используем функцию logout. Внутри неё вызываем
session.pop() с именем удаляемого ключа: session.pop('username', None).
В нашем случае функция удаляет значение по ключу 'username' из сессии. Если
ключа нет в сессии, то функция не вызывает ошибку (т.к. есть значение по умолчанию - None)."""

"""Для работы с сессиями в Flask необходимо установить секретный ключ (SECRET_KEY).
Он используется для шифрования данных в сессии и должен быть уникальным и сложным. 
Подобное мы уже делали на лекции.
"""

"""Далее мы определяем три маршрута:
● '/' для вывода имени пользователя
● '/login' для авторизации
● '/logout' для выхода.

При отправке формы на странице /login происходит запись имени пользователя в
сессию. Если имя пользователя уже есть в сессии, то оно выводится на странице '/'.
"""
"""!!! смотреть сессию там же, где и файлы cookie (F12)"""


if __name__ == "__main__":
    app.run(debug=True)
    # app.run()

"""Сессии в Flask имеют несколько особенностей
● Срок действия сессии по умолчанию составляет 31 день, но его можно
изменить с помощью параметра app.permanent_session_lifetime. Передаётся
новое значение как объект timedelta.
● Данные в сессии хранятся на стороне сервера, поэтому они не могут быть
изменены или прочитаны клиентом (в отличие от файлов cookie). Вернее, может быть удалена 
только ВСЯ СЕССИЯ ПОЛНОСТЬЮ, не видно конкретные данные - есть шифр
● При использовании сессий необходимо обеспечить безопасность
приложения, чтобы злоумышленники не могли получить доступ к данным в
сессии. Например, для защиты от атак перехвата сессии можно использовать
HTTPS и установку параметра app.session_cookie_secure=True"""

"""Сессии Flask позволяют сохранять данные между запросами и обеспечивают
безопасность приложения. Они могут быть использованы для хранения
информации о пользователе, настройках приложения и других данных.
"""
